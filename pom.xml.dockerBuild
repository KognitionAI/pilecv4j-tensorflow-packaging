<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <artifactId>docker-nvidia-tensorflow</artifactId>
  <version>${tensorflow.version}</version>
  <packaging>pom</packaging>

  <properties>
    <docker.image.name>junk</docker.image.name>
    <docker.from.image>nvidia/cuda:9.2-cudnn7-devel-ubuntu18.04</docker.from.image>
    <tensorflow.compute.caps>5.0,6.1</tensorflow.compute.caps>
    <bazel.version>0.15.2</bazel.version>
    <cleanup>try</cleanup> <!-- Set this to "none" in order to leave   -->
                           <!--   the container after the build. Leave -->
                           <!--   it as "try" for the default behavior -->
    <container.directory.with.files>/tmp</container.directory.with.files>
  </properties>

  <dependencyManagement>
  </dependencyManagement>

  <dependencies>
  </dependencies>

  <build>
    <pluginManagement>
      <plugins>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-enforcer-plugin</artifactId>
          <version>3.0.0-M2</version>
        </plugin>
        <plugin>
          <groupId>io.fabric8</groupId>
          <artifactId>docker-maven-plugin</artifactId>
          <version>0.26.0</version>
          <executions>
            <execution>
              <phase>package</phase>
              <goals>
                <goal>build</goal>
<!--                 <goal>push</goal> -->
              </goals>
            </execution>
          </executions>
        </plugin>
      </plugins>
    </pluginManagement>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-enforcer-plugin</artifactId>
        <executions>
          <execution>
            <id>enforce-property</id>
            <goals>
              <goal>enforce</goal>
            </goals>
            <configuration>
              <rules>
                <requireProperty>
                  <property>tensorflow.version</property>
                  <message>ERROR: You need to call maven and set the 'tensorflow.version'. E.g. mvn -Dtensorflow.version=1.9.0 clean install docker:build</message>
                </requireProperty>
              </rules>
              <fail>true</fail>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <!-- Docker plugin -->
      <plugin>
        <groupId>io.fabric8</groupId>
        <artifactId>docker-maven-plugin</artifactId>
        <configuration>
          <verbose>true</verbose>
          <!-- <registry>${docker.registry}</registry> -->
          <images>
            <image>
              <name>${docker.image.name}</name>
              <alias>${project.artifactId}</alias>
              <build>
                <tags>
                  <!-- "latest" is implicitly built -->
                  <tag>${project.version}</tag>
                </tags>
                <from>${docker.from.image}</from>
                <maintainer>me</maintainer>
                <optimise>true</optimise> <!-- required for "cd's" to work in the runCmd -->
                <cleanup>${cleanup}</cleanup>
                <assembly> <!-- Copy files into the tmp directory to be removed later by a runCmd -->
                  <targetDir>${container.directory.with.files}</targetDir>
                  <exportTargetDir>false</exportTargetDir>
                  <permissions>ignore</permissions>
                  <inline>
                    <files>
                      <file>
                        <source>device_query.tar.gz</source>
                        <outputDirectory>.</outputDirectory>
                      </file>
                      <file>
                        <source>NCCL-SLA.txt</source>
                        <outputDirectory>.</outputDirectory>
                      </file>
                    </files>
                  </inline>
                </assembly>
                <runCmds>
                  <!-- Check some things before moving on to the build -->
                  <runCmd>test "`ldconfig -p | grep libcuda.so`" = "" &amp;&amp; echo "This container is not being built using nvidia-docker. Please see the README for details"; test true</runCmd>
                  <runCmd>test "`ldconfig -p | grep libcuda.so`" != ""</runCmd>
                  
                  <!-- Install dependencies -->
                  <runCmd>apt-get update</runCmd>
                  <runCmd>apt-get upgrade -y</runCmd>
                  <runCmd>apt-get install -y git wget</runCmd>

                  <!-- before we go too far, let's make sure we can get the specified tensorflow -->
                  <!-- Checkout tensorflow -->
                  <runCmd>mkdir -p /opt</runCmd>
                  <runCmd>cd /opt</runCmd>
                  <runCmd>git clone https://github.com/tensorflow/tensorflow</runCmd>
                  <runCmd>cd tensorflow</runCmd>
                  <runCmd>git checkout v${tensorflow.version}</runCmd>

                  <!-- make sure we can pull the bazel version specified -->
                  <runCmd>cd /tmp</runCmd>
                  <runCmd>wget -q https://github.com/bazelbuild/bazel/releases/download/${bazel.version}/bazel-${bazel.version}-installer-linux-x86_64.sh</runCmd>
                  <runCmd>cd -</runCmd>

                  <!-- continue installing more dependencies -->
                  <runCmd>apt-get install -y build-essential curl pkg-config python3-dev unzip zip</runCmd>
                  <runCmd>apt-get install -y openjdk-8-jdk</runCmd>
                  <runCmd>apt-get install -y python3-numpy python3-dev python3-pip python3-wheel</runCmd>

                  <!-- Build the sample cuda program "deviceQuery" -->
                  <runCmd>cd /</runCmd>
                  <runCmd>tar -xvf ${container.directory.with.files}/device_query.tar.gz</runCmd>
                  <runCmd>rm ${container.directory.with.files}/device_query.tar.gz</runCmd>
                  <runCmd>cd /usr/local/cuda-9.2/samples/1_Utilities/deviceQuery/</runCmd>
                  <runCmd>make</runCmd>
                  <runCmd>./deviceQuery</runCmd>

                  <!-- Hack make python use python3 -->
                  <runCmd>ln -s /usr/bin/python3 /usr/bin/python</runCmd>

                  <!-- Hack, fix assumptions tensorflow build makes about NCCL installation -->
                  <runCmd>mkdir /usr/local/cuda-9.2/nccl</runCmd>
                  <runCmd>ln -s /usr/include /usr/local/cuda-9.2/nccl/include</runCmd>
                  <runCmd>ln -s /usr/lib/x86_64-linux-gnu /usr/local/cuda-9.2/nccl/lib</runCmd>
                  <runCmd>mv ${container.directory.with.files}/NCCL-SLA.txt /usr/local/cuda-9.2/nccl</runCmd>

                  <!-- Install bazel using the installer -->
                  <runCmd>cd /tmp</runCmd>
                  <runCmd>chmod +x bazel-${bazel.version}-installer-linux-x86_64.sh</runCmd>
                  <runCmd>./bazel-${bazel.version}-installer-linux-x86_64.sh</runCmd>
                  <runCmd>rm bazel-${bazel.version}-installer-linux-x86_64.sh</runCmd>

                  <!-- Prepare to build tensorflow -->
                  <runCmd>cd /opt/tensorflow</runCmd>

                  <!-- Set up all environment variables that allow the configure to run without being interactive -->
                  <runCmd>export TF_NEED_S3=0</runCmd>
                  <runCmd>export TF_NEED_GCP=0</runCmd>
                  <runCmd>export TF_NEED_HDFS=0</runCmd>
                  <runCmd>export TF_NEED_JEMALLOC=0</runCmd>
                  <runCmd>export TF_NEED_KAFKA=1</runCmd>
                  <runCmd>export TF_NEED_OPENCL=0</runCmd>
                  <runCmd>export TF_NEED_COMPUTECPP=1</runCmd>
                  <runCmd>export TF_NEED_OPENCL=0</runCmd>
                  <runCmd>export TF_CUDA_CLANG=0</runCmd>
                  <runCmd>export TF_NEED_TENSORRT=0</runCmd>
                  <runCmd>export PYTHONPATH=/usr/bin/python3</runCmd>
                  <runCmd>export PYTHON_BIN_PATH="$PYTHONPATH"</runCmd>
                  <runCmd>export USE_DEFAULT_PYTHON_LIB_PATH=1</runCmd>
                  <runCmd>export TF_ENABLE_XLA=0</runCmd>
                  <runCmd>export TF_NEED_GDR=0</runCmd>
                  <runCmd>export TF_NEED_VERBS=0</runCmd>
                  <runCmd>export TF_NEED_OPENCL_SYCL=0</runCmd>
                  <runCmd>export TF_NEED_CUDA=1</runCmd>
                  <runCmd>export TF_CUDA_VERSION=9.2</runCmd>
                  <runCmd>export CUDA_PATH=/usr/local/cuda-9.2</runCmd>
                  <runCmd>export CUDA_TOOLKIT_PATH="$CUDA_PATH"</runCmd>
                  <runCmd>export TF_CUDNN_VERSION=7.1</runCmd>
                  <runCmd>export CUDNN_INSTALL_PATH="$CUDA_TOOLKIT_PATH"</runCmd>
                  <runCmd>export TF_NCCL_VERSION=2.2.13</runCmd>
                  <runCmd>export NCCL_INSTALL_PATH="$CUDA_TOOLKIT_PATH"/nccl</runCmd>
                  <runCmd>export TF_CUDA_COMPUTE_CAPABILITIES="${tensorflow.compute.caps}"</runCmd>
                  <runCmd>export GCC_HOST_COMPILER_PATH=/usr/bin/gcc</runCmd>
                  <runCmd>export TF_NEED_MPI=0</runCmd>
                  <runCmd>export CC_OPT_FLAGS="-march=native"</runCmd>
                  <runCmd>export TF_SET_ANDROID_WORKSPACE=0</runCmd>

                  <!-- Help the linker -->
                  <runCmd>export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/cuda/extras/CUPTI/lib64</runCmd>

                  <runCmd>./configure</runCmd>
                  <runCmd>bazel build --config=opt --config=cuda --config=monolithic //tensorflow/tools/pip_package:build_pip_package //tensorflow/java:tensorflow //tensorflow/java:libtensorflow_jni</runCmd>

                  <!-- Build the python packages and install them -->
                  <runCmd>./bazel-bin/tensorflow/tools/pip_package/build_pip_package /tmp/tensorflow_pkg</runCmd>
                  <runCmd>pip3 install /tmp/tensorflow_pkg/tensorflow-*.whl</runCmd>
                  <runCmd>rm -rf /tmp/tensorflow_pkg</runCmd>
                  <runCmd>apt-get clean</runCmd>
                  <runCmd>apt-get autoclean</runCmd>
                </runCmds>
              </build>
            </image>
          </images>
        </configuration>
      </plugin>
    </plugins>
  </build>

</project>
